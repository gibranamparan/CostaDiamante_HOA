@using CostaDiamante_HOA.Models
@model CostaDiamante_HOA.Models.RegisterViewModel
@{
    Boolean editMode = ViewData["editMode"] != null ? (Boolean)ViewData["editMode"] : false;
    if (!editMode)
    {
        Model.registrationDate = DateTime.Today;
    }
}
    @using (Html.BeginForm(null, "Account", FormMethod.Post, new {role = "form", autocomplete = "off", id="userForm" }))
    {
        @Html.ValidationSummary("", new { @class = "text-danger" })
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.userID)
        @Html.HiddenFor(model => model.hash)
        @Html.HiddenFor(model => model.stamp)
        <hr />
        <div class="row">
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.name)
                @Html.EditorFor(m => m.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.name, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.lastname)
                @Html.EditorFor(m => m.lastname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.lastname)
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.Email)
                @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.registrationDate)
                @Html.EditorFor(m => m.registrationDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.registrationDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.Password)
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(m => m.ConfirmPassword)
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>
        if (Model.roleName != ApplicationUser.RoleNames.ADMIN) //SHOW Role Dropdown
        {
            <div class="row">
                <div class="form-group col-md-6">
                    @Html.LabelFor(m => m.roleName)
                    @*//TODO: Validate the role to be removed from the list*@
                    @{
                        string roleToIgnore = editMode ? ApplicationUser.RoleNames.ADMIN: null; // Cannot change to Admin Role in edit form
                        @Html.DropDownListFor(m => m.roleName, RegisterViewModel.selectListUserRoles(roleToIgnore), new { v_model = "rolName" });
                    }
                    @Html.ValidationMessageFor(m => m.roleName, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group col-md-12">
            <div class="col-md-10">
                <button class="btn btn-success" v-on:click="validateRol($event)">
                    @if (editMode)
                {
                        <span>Save</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
            </div>
        </div>
    }

<script>

    function initUserForm() {
        var app = new Vue({
            el:"#userForm",
            data: {
                rolName:'@ApplicationUser.RoleNames.OWNER'
            },
            methods: {
                validateRol(event) {
                    event.preventDefault()

                    if (this.rolName != '@ApplicationUser.RoleNames.OWNER') {
                        swal(`Confirm ${this.rolName} Registration`, "Your are going to register a user with "+this.rolName+" permissions, are you sure?",
                        {
                            dangerMode: true,
                            buttons: true
                        }).then(confirmed=> {
                            if (confirmed) {
                                document.getElementById("userForm").submit();
                            }
                        })
                    } else {
                        document.getElementById("userForm").submit();
                    }
                }
            }
        })
    }
</script>
