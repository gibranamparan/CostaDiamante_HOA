
@using CostaDiamante_HOA.Models
@using System.Configuration
@model Payment
@{ 
    //Total cost to pay
    decimal totalCost = ViewData["totalCost"] == null ? 0 : (decimal)ViewData["totalCost"];
    decimal HOAStandarFee = Payment.VMHOAQuarter.StandarHOAFee;

    //Setting up identity variables for this payments
    int visitID = Model.typeOfPayment == Payment.TypeOfPayment.RENTAL_IMPACT ? ((Payment_RentImpact)Model).visitID : 0; //For Impact of rent
    Payment.TypeOfPayment typeOfPayment = Model.typeOfPayment;

    //If its a payment for impaact of rent, we get the cost of the rent, else, if its HOA fee, the totla cost is the standar fee.
    totalCost = typeOfPayment == Payment.TypeOfPayment.HOA_FEE ? HOAStandarFee : totalCost;

    //API URLs depends on type of payment
    string indexURL = typeOfPayment == Payment.TypeOfPayment.HOA_FEE ? "/IndexPaymentsHOAFee/" : (typeOfPayment == Payment.TypeOfPayment.RENTAL_IMPACT ? "IndexPaymentsRentImpact/" + visitID : "");
    string createURL = typeOfPayment == Payment.TypeOfPayment.HOA_FEE ? "/CreatePaymentsHOAFee" : (typeOfPayment == Payment.TypeOfPayment.RENTAL_IMPACT ? "CreatePaymentsRentImpact" : "");
}
<script type="text/x-template" id="payments-list-template">
    <div id="pnlPayments" class="panel panel-primary">
        <div class="panel-heading">
            <div class="row">
                <h3 class="panel-title col-md-11">@Model.TypeOfPaymentName</h3>
                <div class="col-md-1">
                    <img style="width: 1.5em;" class="pull-right" src="/images/loading1.gif" v-if="loading"/>
                </div>
            </div>
        </div>
        <div class="panel-body">
            <form class="row form-inline" v-on:submit.prevent="createNewPayment()" v-if="toPay>0">
                @Html.AntiForgeryToken()
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => Model.amount) (USD)
                    <input id="amount" class="form-control" type="number"
                           v-bind:min="0" v-model.number="newPayment.amount"
                           v-bind:max="toPay + (interest?interest:0)" />
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => Model.date)
                    @Html.EditorFor(model => Model.date, new { htmlAttributes = new { @class = "form-control", v_model = "newPayment.date" } })
                </div>
                <div class="form-group col-md-2">
                    <button id="btnRegister" name="createVisit" class="btn btn-success" type="submit"
                            v-bind:disabled="newPayment.amount == 0 || (newPayment.amount > (toPay + interest))">
                        Registrar
                    </button>
                </div>
            </form>
            <div class="alert alert-info" v-if="toPay==0">
                @if (typeOfPayment == Payment.TypeOfPayment.HOA_FEE)
                {
                    @Html.Raw(GlobalMessages.HOAFEE_COMPLETE_PAID)
                }
                else if (typeOfPayment == Payment.TypeOfPayment.RENTAL_IMPACT)
                {
                    @Html.Raw(GlobalMessages.VISIT_COMPLETE_PAID)
                }
            </div>
            <hr>
            <div>
                <div class="row col-md-12" style="font-size: 1.2em">
                    <div class="col-md-4">
                        <strong>Total Paid: </strong>
                        <span class="form-control-static">{{numeral(totalPaid).format('$0,000.00')}}</span>
                    </div>
                    <div class="col-md-4" v-if="interest>0">
                        <strong>Interest: </strong>
                        <span class="form-control-static">{{numeral(interest).format('$0,000.00')}}</span>
                    </div>
                    <div class="col-md-4">
                        <strong>To Pay: </strong>
                        <span class="form-control-static">{{numeral(toPay + (interest?interest:0) ).format('$0,000.00')}}</span>
                    </div>
                </div>
                <table id="tblPayments" class="table table-hover table-striped" v-if="payments.length > 0">
                    <thead>
                        <tr>
                            <th style="width: 2em"></th>
                            <th v-on:click="sortPayments('amount')" style="cursor:pointer">
                                @Html.DisplayNameFor(model => Model.amount)
                            </th>
                            <th v-on:click="sortPayments('dtDate')" style="cursor:pointer">
                                @Html.DisplayNameFor(model => Model.date)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(payment, i) in payments">
                            <td>
                                <i class="fa fa-remove option remove" v-on:click="removePayment(payment)"></i>
                            </td>
                            <td>{{numeral(payment.amount).format('$0,000.00')}}</td>
                            <td>{{moment(payment.date).format('LL')}}</td>
                        </tr>
                    </tbody>
                </table>
                <div class="alert alert-info" v-if="payments.length == 0">
                    <strong>No payments</strong> <span>have been registered for this @(typeOfPayment == Payment.TypeOfPayment.HOA_FEE?"trimester" : "visit").</span>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var exception
    function initListPayments(){
        var antiForgeryToken = $("input[name=__RequestVerificationToken]").val(); //Token
        const v = Vue.component('payments-list',{
            props: ['year', 'quarter', 'interest','condoid'],
            template: '#payments-list-template',
            data: function() {
                return {
                    sortOrders: {
                        amount : 'asc',
                        date: 'asc'
                    },
                    newPayment: {
                        id: 0,
                        amount: 0.00,
                        date: '@Model.date.ToString("yyyy-MM-dd")',
                        dtDate: new Date('@Model.date.ToString("yyyy/MM/dd")'),
                        typeOfPayment: 1,
                        //Set the visit ID just if the payment its for RentImpact
                        visitID: @(visitID),
                        year: 0,
                        quarterNumber: 0,
                        loading : false,
                        condoID:0
                    },
                    paymentType : '@Model.typeOfPayment',
                    payments: [],
                    totalCost: @(totalCost),
                    toPay: 0,
                    totalPaid: 0,
                    isblocked: true,
                    api: {}
                }
            },
            watch:{
                year: function(){
                    this.getPayments();
                    return this.year
                },
                quarter: function(){
                    this.getPayments();
                    return this.quarter
                },
                paymentDate(){
                    this.getInterest()
                }
            },
            computed:{
                paymentDate(){
                    return this.newPayment.date
                }
            },
            methods: {
                //Get initially all payments
                getPayments: function () {
                    var self = this;
                    var indexUrl = '@(indexURL)';
                    if(this.paymentType == '@(Payment.TypeOfPayment.HOA_FEE)'){
                        //URL to get payments for HOAFee
                        indexUrl += this.condoid+"?year="+this.year+"&quarter="+this.quarter
                    }
                    this.loading = true

                    this.api.get(indexUrl)
                    .then(function (response) {
                        var dataFromServer = response.data

                        if(dataFromServer.numReg){ //The query returned data from database
                            dataFromServer = dataFromServer.res
                            self.payments = dataFromServer.map(function (item) {
                                var newItem = {}
                                Object.assign(newItem, self.newPayment)
                                newItem.id = item.id
                                newItem.date = item.date
                                newItem.dtDate = new Date(item.date),
                                newItem.amount = item.amount
                                return newItem
                            })
                        }else if(dataFromServer.errorMsg){ //There were no rows and an error was reported
                            notifyError(dataFromServer.errorMsg)
                        }else{ //No rows and no errors, no payments
                            //The paymentes row is cleared
                            self.payments = []
                        }
                        self.loading = false
                    })
                    .catch(function (error) {
                        exception = error
                        notifyError(error.message)
                        this.loading = false
                    })
                },
                //Add a new payment for the impact of rent or HOAFee async from server
                createNewPayment: function () {
                    //If its a HOAFee payment
                    if(this.paymentType == '@(Payment.TypeOfPayment.HOA_FEE)'){
                        //Set condoID, year and quarter
                        this.newPayment.year = this.year
                        this.newPayment.quarterNumber = this.quarter
                        this.newPayment.condoID = this.condoid
                    }

                    var self = this;
                    this.api.post('@(createURL)', {
                        payment: self.newPayment
                    })
                    .then(response => {
                        var response = response.data
                        if (response.numReg) { //If the paymente was successfully registered
                            var newPayment = response.result
                            //Clone and insert new payment to state
                            self.payments.push(newPayment)
                            self.sortPayments()

                            //Clear new payment container
                            self.newPayment.amount = 0
                            self.newPayment.date = '@Model.date.ToString("yyyy-MM-dd")'
                            self.newPayment.dtDate = new Date(self.date)

                            //Focus on default
                            document.getElementById("amount").focus()
                            self.$emit('quarter-changed')
                            //Notify successfull registration
                            $.notify("@(GlobalMessages.PAY_NEW)", { autoHideDelay: 2000, className: 'success', globalPosition: 'bottom left' });

                        } else if (response.errorMsg) {
                            notifyError('@GlobalMessages.ERROR_OCURRED' + response.errorMsg)
                        } else { //Unknown error
                            notifyError(response)
                        }
                    })
                    .catch(e => {
                        exception = e
                        notifyError(e.message)
                    })
                },
                //Remove payment async from server after confirmation
                removePayment: function (item) {
                    self = this
                    //show confirmation dialog
                    swal("Confirm Delete", '@GlobalMessages.PAY_CANCEL_CONFIRM'
                        + " " + numeral(item.amount).format('$0,000.00') + " paid in " + moment(item.date).format('LL'),
                    {
                        dangerMode: true,
                        buttons:true
                    }).then(confirmed=>{
                        if (confirmed) { //If removal was confirmed
                            this.api.post('Delete', { //Execute async request to server
                                id: item.id
                            })
                            .then(response => {
                                var response = response.data
                                if (response.numReg) { //If removal was successful
                                    //updates payments list
                                    self.payments = self.payments.filter(function (pay) { return pay.id != item.id })
                                    self.sortPayments()

                                    self.$emit('quarter-changed')
                                    //Notify successfully done operation
                                    $.notify('@GlobalMessages.PAY_CANCELED', { autoHideDelay: 2000, className: 'success', globalPosition: 'bottom left' });
                                } else if (response.errorMsg) { //Custom error from server
                                    notifyError('@GlobalMessages.ERROR_OCURRED' + response.errorMsg)
                                } else { //Unknown error
                                    notifyError(response)
                                }
                            })
                            .catch(e => { //Error in request
                                exception = e
                                notifyError(e.message)
                            })
                        }
                    })
                },
                sortPayments: function (fieldName) {//Sort paymentes desceding
                    sortBy(this.payments, fieldName, this.sortOrders.amount)
                    this.sortOrders.amount = this.sortOrders.amount == 'desc' ? 'asc' : 'desc'
                },
                updateAmounts: function () { //Function to recalculate amounts in screen after getting payments
                    this.totalPaid = this.calculateTotalPaid()
                    this.toPay = (this.totalCost < this.totalPaid) ? 0 : (this.totalCost - this.totalPaid)
                    this.allowNewPayment = this.toPay > 0
                },
                calculateTotalPaid: function () {
                    var res = 0
                    if (this.payments && this.payments.length > 0)
                        res = this.payments.map(function (item) { return item.amount }).reduce(function (a, b) { return a + b })
                    return res
                },
                getInterest(){
                    var url = "GetInterestByReferenceDate/"+this.condoid+"?year="+this.year+"&quarter="+this.quarter+"&refDate="+this.newPayment.date
                    this.loading = true;
                    var self = this
                    this.api.get(url)
                    .then(function (response) {
                        var dataFromServer = response.data

                        if(dataFromServer.numReg){ //The query returned data from database
                            self.interest = dataFromServer.res
                        }else if(dataFromServer.errorMsg){ //There were no rows and an error was reported
                            notifyError(dataFromServer.errorMsg)
                        }
                        self.loading = false
                    })
                    .catch(function (error) {
                        exception = error
                        notifyError(error.message)
                        this.loading = false
                    })
                }
                
            },
            created() {
                this.api = axios.create({ //Init connection to server
                    baseURL: "/Payments",
                    timeout: 200000,
                    headers: {"__RequestVerificationToken" : antiForgeryToken}
                });

                this.getPayments(); //Get payments
                this.updateAmounts() //Recalculate
            },
            updated() {

                this.updateAmounts() //Just recalculate
            }
        })
        return v;
    }
</script>