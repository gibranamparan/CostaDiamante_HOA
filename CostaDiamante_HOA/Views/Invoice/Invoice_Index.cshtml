@using CostaDiamante_HOA.Models
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="appInvoices">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="panel-title">Invoices Generator</h3>
        </div>
        <div class="panel-body">
            <form @@submit.prevent="sendInvoices()">
                <div class="row">
                    <div class="form-group col">
                        <label>Type of Invoice</label>
                        <select class="form-control" v-model="invoiceGeneratorForm.typeOfInvoice">
                            <option value="@((int)Payment.TypeOfPayment.HOA_FEE)">HOA Fees</option>
                            <option value="@((int)Payment.TypeOfPayment.RENTAL_IMPACT)">Impact of Rent</option>
                        </select>
                    </div>
                    <div class="form-group col">
                        <label>Year</label>
                        <input class="form-control" type="number" v-model="invoiceGeneratorForm.year" />
                    </div>
                    <div class="form-group col" v-if="invoiceGeneratorForm.typeOfInvoice == @((int)Payment.TypeOfPayment.HOA_FEE)">
                        <label>Quarter</label><span>{{invoiceGeneratorForm.quarter}}</span>
                        <select class="form-control" v-model="invoiceGeneratorForm.quarter">
                            <option v-for="(quarter,idx) in quartersNames" v-bind:value="idx+1">{{quarter}}</option>
                        </select>
                    </div>

                    <div class="form-group col">
                        <label>Report Date</label>
                        <input class="form-control" type="date" value="@(DateTime.Today.ToString("yyyy-MM-dd"))" 
                               v-model="invoiceGeneratorForm.reportDate" />
                    </div>

                </div>
                <!--<button class="btn btn-primary" type="submit">Send Invoices</button>-->
            </form>
        </div>
    </div>
    <img style="width: 2em" src="~/images/loading1.gif" v-if="loading" />
    <v-client-table v-bind:data="condos" v-bind:columns="cols" v-bind:options="options">
        <input type="checkbox" slot="selected" slot-scope="props" 
               v-model="condos.filter(con=>con.condoID == props.row.condoID)[0].selected" @@change="printSelected()">
        <a target="_blank" slot-scope="props" slot="ownerName" v-bind:href="'/owners/details/'+props.row.ownerID">
            {{props.row.ownerName}}
        </a>
        <span slot-scope="props" slot="actions" >
            <a v-bind:href="'DownloadInvoice/'+props.row.condoID+params">
                <i class="fa fa-download"></i> <span>Download</span>
            </a>
            <span> | </span>
            <a @@click="sendInvoice(props.row.condoID)" style="cursor: pointer">
                <i class="fa fa-envelope"></i> <span>Send Invoice</span>
            </a>
        </span>
    </v-client-table>
</div>
@Html.AntiForgeryToken()
@section Scripts{
<script>
    var response
    installVueTable()

    var cols = ['selected', 'condoName', 'ownerName', "concatEmails", 'actions']
    var colsHeadings
    var antiForgeryToken = document.getElementsByName("__RequestVerificationToken")[0].value; //Token
    const api = axios.create({ //Init connection to server
        timeout: 200000,
        headers: { "__RequestVerificationToken": antiForgeryToken }
    });

    var app = new Vue({
        el: "#appInvoices",
        data: {
            loading: true,
            condos: {},
            selectedCondos: {},
            options: {
                headings: { 'condoName': 'Condo', 'ownerName': 'Owner', "concatEmails":"Emails",'actions':''}
            },
            quartersNames: [ "Q1: January - March", "Q2: April - Jun", "Q3: July - September", "Q4: Octuber - December" ],
            invoiceGeneratorForm: { typeOfInvoice : @((int)Payment.TypeOfPayment.HOA_FEE), quarter: 1, year: @(DateTime.Today.Year)},
        },
        computed:{
            params(){
                return `?year=${this.invoiceGeneratorForm.year}&quarter=${this.invoiceGeneratorForm.quarter}&typeOfInvoice=${this.invoiceGeneratorForm.typeOfInvoice}`
            }
        }
        ,
        methods: {
            selectCondo(condoID) {
                var condo = this.condos.filter(con=>con.condoID == condoID)[0]
                condo.selected = !condo.selected
                console.log(JSON.stringify(this.condos.filter(con=>con.selected)))
            },
            printSelected() {
                console.log(JSON.stringify(this.condos.filter(con=>con.selected)))
            },
            sendInvoices() {
                swal({ title: "Are your sure?", text: "You are going to send invoices to the selected owners, are your sure?", buttons: true })
                .then(confirm=> {
                    if(confirm){
                        var selectedCondos = this.condos.filter(con=>con.selected)
                        api.post("/invoice/SendInvoices", { selectedCondos, invoiceGeneratorForm:this.invoiceGeneratorForm })
                        .then(res=> {
                            res = res.data
                            if (res.count > 0) {
                                console.log(res.invoicesStatus)
                                notifySuccess("All Invoices Sent", "All the selected invoices were sent to the owners and related contacts.")
                            } else if (res.errorMessage) {
                                notifyError(res.errorMessage)
                            }
                        }).catch(err => {
                            response = err
                            console.log(err)
                        })
                    }
                })
            },
            sendInvoice(condoID){
                swal({ title: "Are your sure?", text: "You are going to send invoice to the selected owner, are your sure?", buttons: true })
                .then(confirm => {
                    if(confirm){
                        api.post("/invoice/SendEmail/"+condoID, { ifg: this.invoiceGeneratorForm })
                        .then(res => {
                            res = res.data
                            if (res.count > 0) {
                                console.log(res.invoicesStatus)
                                notifySuccess("Invoice Sent", "The invoice was sent")
                            } else if (res.errorMessage) {
                                notifyError(res.errorMessage)
                            }
                        }).catch(err => {
                            response = err
                            console.log(err)
                        })
                    }
                })

            }
        },
        beforeCreate() {
            api.get("/condo/List")
            .then(res=> {
                res = res.data
                if(res.count > 0){
                    this.condos = res.condos
                } else if (res.errorMessage) {
                    notifyError(res.errorMessage)
                }
                this.loading = false;
            }).catch(err => {
                response = err
                console.log(err)
            })
        }
    })
</script>
}