@using CostaDiamante_HOA.Models
@model CostaDiamante_HOA.Models.Visit

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<nav>
    <a href="@Url.Action("Details","Owners",new { id = Model.ownerID })">
        <i class="glyphicon glyphicon-arrow-left"></i> <span>Back to Owner Details</span>
    </a>
</nav>

@Html.Partial("../Owners/Partial_infoOwner", Model.owner)

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Edit Visit</h3>
    </div>
    <div class="panel-body">
        <div id="app">
            <form v-on:submit.prevent="sendDataToServer()">
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.arrivalDate)
                    @Html.EditorFor(model => model.arrivalDate, new { htmlAttributes = new { @class = "form-control", v_model = "visit.arrivalDate" } })
                    @Html.ValidationMessageFor(model => model.arrivalDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.departureDate)
                    @Html.EditorFor(model => model.departureDate, new { htmlAttributes = new { @class = "form-control", v_model = "visit.departureDate" } })
                    @Html.ValidationMessageFor(model => model.departureDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.totalCost)
                    @Html.EditorFor(model => model.totalCost, new { HtmlAttributes = new { @class = "form-control", @readonly = "readonly", v_model = "totalCostFunc" } })
                </div>

                <div class="form-group col-md-2">
                    <br />
                    <button v-bind:disabled="isVisitValid()"
                            type="submit" class="btn btn-primary pull-right btn-block">
                        Update
                    </button>
                    <button />
                </div>
            </form>

            <div>
                @{
                    Visitor visitor = new Visitor();
                }
                <div>

                    <div class="form-group col-md-4">
                        <label>Type of visit</label>
                        <select v-model="visit.typeOfVisit" class="form-control">
                            <option v-for="option in optionsTypeOfVisit" v-bind:value="option.value" v-bind:selected="option.value == 0">
                                {{ option.text }}
                            </option>
                        </select>
                    </div>

                    <div class="form-group col-md-8">
                        <div v-if="visit.typeOfVisit === 0" class="col-md-6">
                            <label>Owner is accompanying</label>
                            <input class="form-control" type="checkbox" v-model="withTheOwner">
                        </div>

                        <div v-if="visit.typeOfVisit === 0 && !withTheOwner" class="col-md-6">
                            <label>Skip Payment for Friends and Family</label>
                            <input class="form-control" type="checkbox" v-model="skipPayment">
                        </div>
                    </div>
                    <div class="clearfix"></div>

                    <div class="form-group col-md-12">
                        <div v-if="visit.typeOfVisit === 0" class="alert alert-info" role="alert">
                            <span v-if="visit.typeOfVisit === 0 && withTheOwner === true || skipPayment === true">Visit without payment.</span>
                            <span v-if="visit.typeOfVisit === 0 && withTheOwner === false && skipPayment === false">5 dollars per person if under 6 years does not apply.</span>
                        </div>
                        <div v-if="visit.typeOfVisit === 1" class="alert alert-info" role="alert">
                            For renting, every <strong>extra person</strong> more than <strong>12 guests</strong> cost 50dlls for bracelet. <br>
                            The <strong>Rental Impact Fee</strong> for the visit visit is 75 dlls per day.
                        </div>
                    </div>
                    <div>
                        <div class="clearfix"></div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => visitor.name)
                            @Html.EditorFor(model => visitor.name, new { htmlAttributes = new { @class = "form-control", v_model = "newVisitor.name" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => visitor.lastName)
                            @Html.EditorFor(model => visitor.lastName, new { htmlAttributes = new { @class = "form-control", v_model = "newVisitor.lastName" } })
                        </div>

                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => visitor.isYounger)
                            @Html.EditorFor(model => visitor.isYounger, new { htmlAttributes = new { @class = "form-control", v_model = "newVisitor.isYounger" } })
                        </div>

                        <div class="form-group col-md-2">
                            <br />
                            <button type="button" value="Add" class="btn btn-success btn-block pull-right" v-on:click="saveNewVisitorDB"
                                    v-bind:disabled="(newVisitor.name === '' && newVisitor.lastName === '')">
                                Add
                            </button>
                        </div>
                    </div>
                    <!-- Visitors table -->
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>@Html.DisplayNameFor(model => visitor.name)</th>
                                <th>@Html.DisplayNameFor(model => visitor.lastName)</th>
                                <th>@Html.DisplayNameFor(model => visitor.isYounger)</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(visitor, i) in visit.visitors">
                                <td>{{ i + 1 }}</td>
                                <td>{{ visitor.name }}</td>
                                <td>{{ visitor.lastName }}</td>
                                <td>{{ visitor.isYounger | isYoungerFormat }}</td>
                                <td>
                                    <label v-on:click="removeVisitorToTable(i)" class="removeLabel">
                                        <i class="glyphicon glyphicon-remove"></i>
                                        <span class="">Remove</span>
                                    </label>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    var token = $('input[name=__RequestVerificationToken]').val()
    var api = axios.create({
        baseURL: "/Visits",
        timeout: 100000,
        headers: {
            Authorization: token
        }
    });
    Vue.filter('isYoungerFormat', (value) => {
        if(value) {
            return 'Si'
        } else {
            return 'No'
        }
    });
    Vue.mixin({
        methods: {
            watchCollection(arr, cb) {
                arr.forEach((val) => this.$watch(val, cb))
            }
        }
    })
    const v = new Vue({
        el: '#app',
        data: {
            visit: { //Main model to save what is going to be submited to the server
                visitID: '@Model.visitID',
                arrivalDate: '@Model.arrivalDate.ToString("yyyy-MM-dd")',
                departureDate: '@Model.departureDate.ToString("yyyy-MM-dd")',
                condoID: @Model.condoID,
                ownerID: '@Model.ownerID',
                totalCost : '@Model.totalCost',
                typeOfVisit: '',
                date: '@Model.date',
                paymentOmitted: this.skipPayment,
                visitors: []
            },
            newVisitor:{ //Model to save a new visitor
                name:'',
                lastName:'',
                isYounger:false,
                clone: function (){
                    return {visitorID : this.lastVisitorIDFromDB, name : this.name, lastName : this.lastName, isYounger : this.isYounger, visitID: '@Model.visitID'}
                },
                clear: function(){
                    this.name = ''; this.lastName= ''; this.isYounger = false;
                }
            },
            lastVisitorIDFromDB: '',
            //typeOfVisit: 0,
            optionsTypeOfVisit: [
                { text: 'Visit of friends and family', value: 0 },
                { text: 'Visit by rent', value: 1 }
            ],
            withTheOwner: false,
            skipPayment: false
        },
        methods: {
            getVisitors: function () {
                var ws = this
                axios.post('/Visitors/Index', {
                    id: '@Model.visitID'
                })
                .then(function (response) {
                    ws.visit.visitors = response.data
                    console.log(ws.visit.visitors)
                })
                .catch(function (error) {
                    console.log(error)
                })
            },
            saveNewVisitorDB: function (newVisitor) {
                var ws = this
                axios.post('/Visitors/Create', {
                    visitor: ws.newVisitor.clone()
                })
                .then(function (response) {
                    ws.lastVisitorIDFromDB = response.data.numReg
                    ws.addVisitorToTable()

                })
                .catch(function (error) {
                    console.log(error)
                })
            },
            removeVisitorDB: function (visitorID) {
                var ws = this
                axios.post('/Visitors/Delete', {
                    id: visitorID
                })
                .then(function (response) {
                    console.log(response)
                })
                .catch(function (error) {
                    console.log(error)
                })
            },
            isVisitValid: function () {
                return this.visit.visitors.length === 0 || this.typeOfVisit === 0
            },
            //selectTypeOfVisit: function (value) {
            //    if(value == 0) {
            //        this.withTheOwner = true
            //        this.withoutTheOwner = false
            //    }
            //    if(value == 1) {
            //        this.withoutTheOwner = true
            //        this.withTheOwner = false
            //    }
            //},
            addVisitorToTable: function () {
                this.visit.visitors.push(this.newVisitor.clone()) //The model is clone a pushed into the list of visitors in the visit
                this.newVisitor.clear() //The model for a new visitor is clared to enter a new one
                $("#visitor_name").focus()
            },
            removeVisitorToTable: function (index) { //Removing a selected visitor
                this.removeVisitorDB(this.visit.visitors[index].visitorID)
                this.visit.visitors.splice(index, 1)
            },
            redirectToOwnerDetails: function(){
                setTimeout(function(){window.location.replace("/Visits/")}, 2000)
                swal("Done!","Your visit was scheduled succesfully","success")
            },
            sendDataToServer: function () { //Async call to save the new visit in DB
                var self = this
                axios.post("Edit",{
                    visit : self.visit
                })
                .then(response => {
                    var response = response.data
                    if(response.numReg){
                        self.redirectToOwnerDetails()
                    }else if(response.errorMsg){
                        swal("Oops!","An error ocurred, plase try again. If error persists, plase send this to the system administrator: "+response.errorMsg,"error")
                    }else{ //Unknown error
                        console.log(response)
                    }
                })
                .catch(e => {
                    //debugger
                    console.log(e)
                })
            },
            calculateTotalPerVisit: function () {
                var visitorCount = 0

                if(this.visit.typeOfVisit === 0 && this.withTheOwner || this.skipPayment) {
                    return this.visit.totalCost = 0.00
                }
                if(this.visit.typeOfVisit === 0 && !this.withTheOwner) {
                    let visitorIsNotYounger = this.visit.visitors.filter(visitor => !visitor.isYounger)
                    return this.visit.totalCost = visitorIsNotYounger.length * 5
                }
                if(this.visit.typeOfVisit === 1) {
                    var arrivalDate = new Date(this.visit.arrivalDate).getTime()
                    var departureDate = new Date(this.visit.departureDate).getTime()

                    var differenceDays = departureDate - arrivalDate
                    //console.log(differenceDays)
                    //console.log(differenceDays/(1000*60*60*24))
                    if(this.visit.visitors.length >= 1) {
                        this.visit.totalCost = 75 * (differenceDays/(1000*60*60*24)) // (1000*60*60*24) --> milisegundos -> segundos -> minutos -> horas -> días
                    }

                    if(this.visit.visitors.length > 12) {
                        var visitorExtra = this.visit.visitors.length - 12
                        return this.visit.totalCost + (visitorExtra * 50)
                    }
                    return this.visit.totalCost
                }
            }
        },
        created: function () {
            if('@Model.typeOfVisit' === 'FRIENDS_AND_FAMILY' && '@Model.paymentOmitted' === 'False') {
                console.log('1' + '@Model.paymentOmitted')
                this.withTheOwner = true
            }
            if('@Model.typeOfVisit' === 'FRIENDS_AND_FAMILY' && '@Model.paymentOmitted' === 'True') {
                console.log('2' + '@Model.paymentOmitted')
                this.skipPayment = '@Model.paymentOmitted'
            }

            if('@Model.typeOfVisit' === 'FRIENDS_AND_FAMILY') {
                this.visit.typeOfVisit = 0
            } else {
                this.visit.typeOfVisit = 1
            }
            this.getVisitors()
            this.watchCollection(
                ['visit.typeOfVisit','withTheOwner','visit.arrivalDate','visit.departureDate'],
                this.calculateTotalPerVisit)
        },
        computed: {
            totalCostFunc() {
                return this.calculateTotalPerVisit()
            }
        }
    })
    </script>
}
