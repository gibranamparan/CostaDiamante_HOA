@model CostaDiamante_HOA.Models.Visit.VMVisitsFilter
@using CostaDiamante_HOA.Models
@using CostaDiamante_HOA.GeneralTools

@{
    ViewBag.Title = GlobalMessages.VISIT_HISTORY;
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<Visit> result = ViewBag.result;
    //VMConfirmModalAttributes modalOptions = new VMConfirmModalAttributes
    //{
    //    modalID = "cancelVisitConfirmation",
    //    modalTitle = "Confirm Visit Cancelation",
    //    primaryMessage = "You are going to confirm the cancelation of the selected visit.",
    //    routeVals = null,
    //    modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.DANGER),
    //    callType = VMConfirmModalAttributes.CallType.JAVASCRIPT,
    //    javascriptFunction = "confirmVisitCancelation"
    //};
}


<div id="app">
    <h2>@ViewBag.Title</h2>

    @using (Html.BeginForm("Index", "Visits", FormMethod.Get, null))
    {
        @Html.AntiForgeryToken()
        <div class="alert alert-info">
            The filter search for arrivals in the selected range of time.
        </div>
        <div class="form-inline">
            <div class="row">
                <div class="form-group col-md-5">
                    @Html.LabelFor(model => Model.TimePeriod.startDate)
                    @Html.EditorFor(model => Model.TimePeriod.startDate,
                    new { htmlAttributes = new { @class = "form-control", v_model = "startDate" } })
                </div>

                <div class="form-group col-md-5">
                    @Html.LabelFor(model => Model.TimePeriod.endDate)
                    @Html.EditorFor(model => Model.TimePeriod.endDate,
                    new { htmlAttributes = new { @class = "form-control", v_model = "endDate" } })
                </div>

                <button id="btnSearch" name="searchVisits" class="btn btn-primary" v-bind:disabled="validDate">
                    <i class="fa fa-search"></i> Search
                </button>
            </div>

            @if (User.IsInRole(ApplicationUser.RoleNames.ADMIN))
            {
                <div class="row" style="margin-top:.5em">
                    <div class="form-group col-md-3"
                         title="This will include the visits that are inhouse in the selected range of time.">
                        @Html.CheckBoxFor(model => model.isInHouse)
                        @Html.LabelFor(model => model.isInHouse)
                    </div>
                </div>
            }
            <div id="errorMessage" class="field-validation-error"></div>
        </div>
    }

    @if (result.Count() == 0)
    {
        <div class="alert alert-info">
            @GlobalMessages.NO_VISITS_FOUND
        </div>
    }
    <table class="table table-hover table-striped datatable">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => result.FirstOrDefault().visitID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => result.FirstOrDefault().condoID)
                </th>
                @if (User.IsInRole(ApplicationUser.RoleNames.ADMIN))
                {
                    <th>
                        @Html.DisplayNameFor(model => result.FirstOrDefault().owner.fullName)
                    </th>
                }
                <th>
                    @Html.DisplayNameFor(model => result.FirstOrDefault().arrivalDate)
                </th>
                <th>
                    @Html.DisplayNameFor(model => result.FirstOrDefault().departureDate)
                </th>
                <th>
                    Paid / Total
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in result)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(model => item.visitID)
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.condo.name)
                    </td>
                    @if (User.IsInRole(ApplicationUser.RoleNames.ADMIN))
                    {
                        <td>
                            @Html.DisplayFor(model => item.owner.fullName)
                        </td>
                    }
                    <td>
                        @item.arrivalDate.ToLongDateString()
                    </td>
                    <td>
                        @item.departureDate.ToLongDateString()
                    </td>
                    <td>
                        @Html.DisplayFor(model => item.totalPaid)
                        <span>/</span>
                        @Html.DisplayFor(model => item.totalCost)
                    </td>
                    <td>
                        <a href="@Url.Action("Details", new { id = item.visitID })">
                            <i class="fa fa-address-book"></i> View Notification
                        </a>
                        @if (User.IsInRole(ApplicationUser.RoleNames.ADMIN))
                        {
                            <br />
                            <a href="" v-on:click="deleteVisit(@item.visitID)" data-toggle="modal">
                                <i class="glyphicon glyphicon-remove"></i> Cancel
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>

    </table>
</div>

@section Scripts{
    <script>
        var token = $('input[name=__RequestVerificationToken]').val()
        var api = axios.create({
            baseURL: "/Visits",
            timeout: 100000,
            headers: {
                "__RequestVerificationToken": token
            }
        });
        Vue.mixin({
            methods: {
                watchCollection(arr, cb) {
                    arr.forEach((val) => this.$watch(val, cb))
                }
            }
        })
        const v = new Vue({
            el: '#app',
            data: {
                startDate: '@Model.TimePeriod.startDate.ToString("yyyy-MM-dd")',
                endDate: '@Model.TimePeriod.endDate.ToString("yyyy-MM-dd")',
                validDate: false
            },
            methods: {
                deleteVisit: function (visitID) {
                    swal({
                        title: "Are you sure?",
                        text: "Once deleted, you will not be able to recover this regist!",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true,
                    })
                    .then((willDelete) => {
                        if (willDelete) {
                            this.confirmVisitCancelation(visitID)
                        } else {
                            //swal("Your imaginary file is safe!");
                        }
                    });
                },
                confirmVisitCancelation: function (visitID) {
                    api.post('/Delete', {
                        id: visitID
                    })
                    .then(function (response) {
                        if (response.data.numReg) {
                            window.location.reload()
                            swal('Deleted visit successfully', {
                                buttons: false,
                                icon: "success",
                            });
                        }
                        if (response.data.errorMsg != '') {
                            swal(response.data.errorMsg, {
                                buttons: false,
                                timer: 3000,
                                icon: "error",
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        swal(error, {
                            icon: "error",
                        });
                    });
                },
                validDateFunc: function () {
                    //Date.parse(arrival) > Date.parse(departure) || arrival == "" || departure == ""
                    //this.visit.visitors.length > 0 && this.visit.arrivalDate > this.visit.departureDate && this.visit.arrivalDate != '' && this.visit.departureDate != ''
                    if (this.startDate < this.endDate && this.startDate != '' && this.endDate != '') {
                        this.validDate = false
                    } else {
                        this.validDate = true
                    }
                }
            },
            created: function () {
                this.watchCollection(
                    ['startDate', 'endDate'],
                    this.validDateFunc)
            }
        })
    </script>
}

@*@Html.AntiForgeryToken()
@Html.Partial("../Shared/Partial_ConfirmationModal", modalOptions)
<script>
    function prepareModal(id) {
        $('.modal-footer #btnConfirm')
            .attr('onclick','@(modalOptions.javascriptFunction)('+id+')')
    }

    function confirmVisitCancelation(id) {
        var antiForgeryToken = $('input[name=__RequestVerificationToken]').val();
        jQuery.postJSON("/Visits/DeleteConfirmed",
            { id: id},
            "JSON",
            function (result) {
                if (result.savedRegs > 0) {
                    window.location.reload()
                } else {
                    var error = result.error;
                }
            },
            function (request) {
                alert("Error: " + JSON.stringify(request));
            }, null, antiForgeryToken)
    }
</script>

@section Scripts{
<script>
    //Date picker validation, and button block
    $("#periodReported_startDate, #periodReported_endDate").change(function () {
        var arrival = $("#periodReported_startDate").val();
        var departure = $("#periodReported_endDate").val();

        if (Date.parse(arrival) > Date.parse(departure) || arrival == "" || departure == "") {
            $("#errorMessage").html('"From date" must be less than "To Date"').fadeIn(500)
        } else {
            $("#errorMessage").fadeOut(500)
        }
        enableOrDisableBtnRegister();
    });

    function enableOrDisableBtnRegister() {
        var arrival = $("#periodReported_startDate").val();
        var departure = $("#periodReported_endDate").val();
        var enable = arrival && departure && Date.parse(arrival) <= Date.parse(departure);
        $("#btnSearch").attr('disabled', !enable);
    }
</script>
}*@
