@using CostaDiamante_HOA.Models
@model CostaDiamante_HOA.Models.Visit

@{
    Payments payment = new Payments();
    payment.date = DateTime.Today.AddDays(1);
    ViewBag.Title = "Details";
}

<div id="app">
    <h2>Details</h2>

    <div>
        <h4>Visit</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.condo.name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.condo.name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.owner.name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.owner.name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.totalCost)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.totalCost)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.date)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.date)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.arrivalDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.arrivalDate)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.departureDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.departureDate)
            </dd>

        </dl>
    </div>
    <hr>
    <div>
        @*@Html.Partial("../Payments/Partial_CreatePayment", payment, new ViewDataDictionary {
            { "ownerID", Model.ownerID },
            { "visitID", Model.visitID }
        })*@
        <form v-on:submit.prevent="createNewPayment()">
            <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => payment.amount, htmlAttributes: new { @class = "" }) @*control-label col-md-2*@
                    @Html.EditorFor(model => payment.amount, new { htmlAttributes = new { @class = "form-control", v_model = "newPayment.amount" } })
                    @Html.ValidationMessageFor(model => payment.amount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => payment.date, htmlAttributes: new { @class = "" })
                    @Html.EditorFor(model => payment.date, new { htmlAttributes = new { @class = "form-control", v_model = "newPayment.date" } })
                    @Html.ValidationMessageFor(model => payment.date, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => payment.typeOfPayment, htmlAttributes: new { @class = "" })
                    
                    @Html.EnumDropDownListFor(model => payment.typeOfPayment, new { @class = "form-control", v_model = "newPayment.typeOfPayment" } )
                    @Html.ValidationMessageFor(model => payment.typeOfPayment, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
        </form>
        </div>
    <hr>
    <div>
        <h2>List of payments</h2>
        <table class="table table-hover table-striped datatable"> 
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.owner.name)</th>
                    <th>@Html.DisplayNameFor(model => payment.amount)</th>
                    <th>@Html.DisplayNameFor(model => payment.date)</th>
                    <th>@Html.DisplayNameFor(model => payment.typeOfPayment)</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(payment, i) in payments">
                    <td>{{payment.OwnerName}}</td>
                    <td>{{payment.Amount}}</td>
                    <td>{{payment.Date}}</td>
                    <td>{{payment.TypeOfPayment}}</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div>
        @*@Html.Partial("../Payments/Partial_ListPayments", Model.payments.ToList());*@
        @*@Html.Partial("../Payments/Partial_ListPayments", Model);*@
    </div>




    <p>
        @*@Html.ActionLink("Create new payment", "Create", "Payments", new { visitID = Model.visitID, ownerID = Model.ownerID }, null) |*@
        @Html.ActionLink("Edit", "Edit", new { id = Model.visitID }) |
        @Html.ActionLink("Back to List", "Index")
    </p>

    @*<button v-on:click="getPayments" type="button">Click Me!</button>*@
</div>
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/node_modules/vue/dist/vue.min.js")
@Scripts.Render("~/node_modules/axios/dist/axios.min.js")

<script>
    const v = new Vue({
        el: '#app',
        data: {
            newPayment: {
                amount: 100,
                date: '@payment.date.ToString("yyyy/MM/dd")',
                typeOfPayment: 0,
                ownerID: '@Model.ownerID',
                visitID: '@Model.visitID',
                clone: function () {
                    return { paymentsID: 0, amount: this.amount, date: this.date, typeOfPayment: this.typeOfPayment, ownerID: this.ownerID, visitID: this.visitID }
                },
                clear: function () {
                    this.amount = ''; this.date = ''; this.typeOfPayment = '';
                }
            },
            payments: []
        },
        methods: {
            getPayments: function () {
                var ws = this
                axios.post('/Payments/Index', {
                    id: '@Model.visitID'
                })
                .then(function (response) {
                    ws.payments = response.data
                    console.log(ws.payments)
                })
                .catch(function (error) {
                    console.log(error)
                })
            },
            redirectToOwnerDetails: function(){
                //setTimeout(function () { window.location.replace("/Visits/Details/" + @Model.visitID) }, 2000)
                swal("Done!","Your visit was scheduled succesfully","success")
            },
            createNewPayment: function () {
                var self = this
                axios.post('/Payments/Create', {
                    payment: self.newPayment.clone()
                })
                .then(response => {
                    self.getPayments()
                    var response = response.data
                    if (response.numReg) {
                        self.redirectToOwnerDetails()
                    } else if (response.errorMsg) {
                        swal("Oops!", "An error ocurred, plase try again. If error persists, plase send this to the system administrator: " + response.errorMsg, "error")
                    } else { //Unknown error
                        console.log(response)
                    }
                })
                .catch(e => {
                    debugger
                    console.log(e)
                })
            }
        },
        created: function () {
            this.getPayments()
        }
    })
</script>