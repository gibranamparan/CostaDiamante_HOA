@model Sonora_HOA.Models.CheckInList
@using Sonora_HOA.GeneralTools
@using Microsoft.AspNet.Identity
@using Sonora_HOA.Models
@{ 
    string modalID = "mdlConfirmation" + Model.checkInListID;
    bool selectionMode = false;
    string ownerID = "";
    string listID = "";
    if (ViewData["selectionMode"] != null)
    {
        selectionMode = true;
        ownerID = (string)ViewData["ownerID"];
        listID = (string)ViewData["listID"];
    }


    bool errorGuest = false;
    if (ViewBag.errorGuest != null)
    {
        errorGuest = ViewBag.errorGuest;
    }
    ViewDataDictionary vddNewGuest = new ViewDataDictionary();
    vddNewGuest.Add("errorGuestName", errorGuest);
}

@if (Model.checkInListID > 0)
{
    <div class='@(selectionMode?"hidden":"")'>

        @if (Context.User.IsInRole(ApplicationUser.RoleNames.OWNER))
        {
            <div class="alert alert-info">
                A Check In List is already registered for this period. 
                You'll be able to register a new one when the period has finished.
                You can notify a new visit selecting a condo clicking 
                <a href="@Url.Action("Details","Owners", new { id=Model.ownerID })">here</a>.
            </div>
        }
        @Html.LabelFor(model => model.period):
        @Model.period.ToString("MMMM/dd/yyyy")
        @if (Context.User.IsInRole(ApplicationUser.RoleNames.ADMIN))
        {
            <button type="button" class="alert alert-danger pull-right"
                    data-toggle="modal" href='#@modalID'>
                Cancel List
            </button>
        }
    </div>
}

<table class='table table-hover table-striped'>
    <thead>
        <tr>
            @if (selectionMode)
            {
                <th width="2em">
                    Select Guest
                </th>
            }
            <th>
                @Html.DisplayNameFor(model => model.permissions.FirstOrDefault().fullName)
            </th>
        </tr>
    </thead>
    <tbody>
        @if (Model.permissions != null && Model.permissions.Count() > 0)
        {
            foreach (var item in Model.permissions)
            {
                <tr>
                    @if (selectionMode)
                    {
                        <td>
                            <input type="checkbox" value="@item.permissionsID" 
                                   onchange="selectChange@(listID)(this); enableOrDisableBtnRegister()" />
                        </td>
                    }
                    <td>
                        @Html.DisplayFor(modelItem => item.fullName)
                    </td>
                </tr>
            }
        }
        else if (Model.checkInListID == 0)
        {
            <tr>
                <td colspan="2">
                    <div class="alert alert-info">
                        <strong>No Check In List registered</strong> for selected period (@Model.period).
                        @if (selectionMode) { 
                        <span>
                            Create a new one clicking
                            <strong>
                                <a href='@Url.Action("Index","Permissions", new { id=ownerID, openCheckInList = true })'>here</a>
                            </strong>.
                        </span> 
                        }
                    </div>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td colspan="2">
                    <div class="alert alert-danger">
                        Current Check In List has no guests registered, 
                        this may mean a malfunction of the system. Contact administrator.
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@*Cancel Confirmation dialog *@
@if (!selectionMode)
{
    <div>
        @Html.Partial("../Shared/Partial_ConfirmationModal", new VMConfirmModalAttributes
        {
            modalID = modalID,
            modalTitle = "Confirm cancelation",
            primaryMessage = "You are going to <strong>cancel the selected \"Guest and Family Check in List\"</strong>. " +
                    "If you confirm, the associated <strong>\"Visit Notifications\"</strong> to this check in list will be <strong>canceled too</strong>. " +
                    "You'll need to create a new \"Check in List\" in order to schedule a new visit in this period of the year.",
            action = "Delete",
            controller = "CheckInList",
            routeVals = new { id = Model.checkInListID },
            modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.DANGER),
            callType = VMConfirmModalAttributes.CallType.POSTBACK
        })
    </div>
}

@if (selectionMode)
{
    <script>
        var checkedList@(listID) = new Array();
        //Check the condo to be associated
        function selectChange@(listID)(cb) {
            //Item added to the selected list items
            if ($(cb).is(":checked")) {
                checkedList@(listID).push({
                    permissionsID: $(cb).val(),
                })
            }
            else {
                //If unchecked, item is removed from the selected list items
                var id = $(cb).val();
                checkedList@(listID) = $.grep(checkedList@(listID), function (e) {
                    return e.permissionsID != id;
                });
            }
            console.log(JSON.stringify(checkedList@(listID)));
        }
    </script>
}

